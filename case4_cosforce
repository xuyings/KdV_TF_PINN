"""Backend supported: tensorflow.compat.v1, tensorflow, pytorch, paddle"""
#kdv with cosx force 

import deepxde as dde
import numpy as np
import tensorflow as tf


def func(x):
    m1=1.3
    m2=0.9
    term1=m1*x[:, 0:1]-(-m1*0.5* np.cos(x[:, 1:])+m1**3* x[:, 1:]).astype(np.int64)
    term2=m2*x[:, 0:1]-(-m2*0.5* np.cos(x[:, 1:])+m2**3* x[:, 1:]).astype(np.int64)
    phi=1+np.exp(term1)+np.exp(term2)+((m1-m2)/(m1+m2))**2*np.exp(term1+term2)
    dphi_x= m1*np.exp(term1)+m2*np.exp(term2)+((m1-m2)/(m1+m2))**2*(m1+m2)*np.exp(term1+term2)
    dphi_xx=m1**2*np.exp(term1)+m2**2*np.exp(term2)+(m1-m2)**2*np.exp(term1+term2)



    return 12*(-dphi_x**2/phi**2+dphi_xx/phi)+0.5*np.sin(x[:, 1:])
  


def gen_exact_solution():
    """Generates exact solution for the kdv equation for the given values of x and t."""
    # Number of points in each dimension:
    x_dim, t_dim = (256, 201)

    # Bounds of 'x' and 't':
    x_min, t_min = (-20, -6)
    x_max, t_max = (L, 6)

    # Create tensors:
    t = np.linspace(t_min, t_max, num=t_dim).reshape(t_dim, 1)
    x = np.linspace(x_min, x_max, num=x_dim).reshape(x_dim, 1)
    usol = np.zeros((x_dim, t_dim)).reshape(x_dim, t_dim)

#     # Obtain the value of the exact solution for each generated point:
#     for i in range(x_dim):
#         for j in range(t_dim):
#             usol[i][j] = kdv_eq_exact_solution(x[i], t[j])

    # Save solution:
    np.savez("kdv_eq_data", x=x, t=t, usol=usol)
    
    


def gen_testdata():
    """Import and preprocess the dataset with the exact solution."""
    # Load the data:
    data = np.load("kdv_eq_data.npz")
    # Obtain the values for t, x, and the excat solution:
    t, x, exact = data["t"], data["x"], data["usol"].T
    # Process the data and flatten it out (like labels and features):
    xx, tt = np.meshgrid(x, t)
    X = np.vstack((np.ravel(xx), np.ravel(tt))).T
    y = exact.flatten()[:, None]
    return X, y


# Problem parameters:
a = 1  # Thermal diffusivity
b = 1
L =20  # Length of the bar

# Frequency of the sinusoidal initial conditions

# Generate a dataset with the exact solution (if you dont have one):
gen_exact_solution()


def pde(x, y):
    """Expresses the PDE residual of the kdv equation."""
    dy_t = dde.grad.jacobian(y, x, i=0, j=1)
    dy_x = dde.grad.jacobian(y, x, i=0, j=0)
    dy_xx = dde.grad.hessian(y, x, i=0, j=0)
    dy_xxx = dde.grad.jacobian(dy_xx, x, i=0, j=0)
    return dy_t + a * y * dy_x + b * dy_xxx-0.5*tf.cos(x[:, 1:])

# Computational geometry:
geom = dde.geometry.Interval(-20, 20)
timedomain = dde.geometry.TimeDomain(-6, 6)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)

# Initial and boundary conditions:
bc = dde.PeriodicBC(
    geomtime, 0, lambda _, on_boundary: on_boundary, derivative_order=0, component=0
)
#bc = dde.icbc.PeriodicBC(geomtime,func, lambda _, on_boundary: on_boundary)
ic = dde.icbc.IC(geomtime, func, lambda _, on_initial: on_initial)
                                              
# Define the PDE problem and configurations of the network:
data = dde.data.TimePDE(
    geomtime,
    pde,
    [bc, ic],
    num_domain=2540,
    num_boundary=80,
    num_initial=160,
    num_test=2540,
)
net = dde.nn.FNN([2] + [20] * 3 + [1], "tanh", "Glorot normal")
model = dde.Model(data, net)

# Build and train the model:
model.compile("adam", lr=1e-3)
model.train(iterations=10000)
model.compile("L-BFGS")
losshistory, train_state = model.train()

# Plot/print the results
dde.saveplot(losshistory, train_state, issave=True, isplot=True)
X, y_true = gen_testdata()
y_pred = model.predict(X)
f = model.predict(X, operator=pde)
print("Mean residual:", np.mean(np.absolute(f)))
# print("L2 relative error:", dde.metrics.l2_relative_error(y_true, y_pred))
np.savetxt("test.dat", np.hstack((X, y_true, y_pred)))

